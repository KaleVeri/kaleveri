"""import requests, os, json
import matplotlib.pyplot as plt
import streamlit as st
from io import BytesIO


def detect_image_ai(img_bytes: bytes) -> dict:
    cfg = st.secrets["ai_detection"]
    resp = requests.post(
        cfg["endpoint"],
        data={
            "models": cfg["models"],
            "api_user": cfg["API_USER"],
            "api_secret": cfg["API_SECRET"]
        },
        files={"media": ("image.jpg", img_bytes)}
    )
    data = resp.json()
    # Sightengine sonucundan Ã¶zetlik Ã§Ä±kar
    # Sonradan eklendi(serra)
    # Debug Ã§Ä±ktÄ±sÄ± â€“ terminalde gÃ¶receksin
    print("ğŸ“¦ Gelen API verisi:\n", json.dumps(data, indent=2))

    # Hata yakalama â€“ veri gelmezse Ã§Ã¶kmemesi iÃ§in
    try:
        # prob_ai = data["media"]["ai_generated"]["score"] eski hali
        prob_ai = data["ai_generated"]["score"]#(serra)

    except KeyError:
        prob_ai = 0.0
        # st.error("API'den beklenen 'media' verisi gelmedi. YapÄ± deÄŸiÅŸmiÅŸ olabilir.") eski hali
        st.error("API'den 'ai_generated' verisi alÄ±namadÄ±.") #serra's version

    # buraya kadar
    return {
        "raw": data,
        "prob_ai": prob_ai,
        "summary": {
            "GerÃ§eklik Skoru": f"{1 - prob_ai:.2%}",
            "AI OlasÄ±lÄ±ÄŸÄ±": f"{prob_ai:.2%}"
        }
    }


def plot_detection_result(res: dict):
    fig, ax = plt.subplots()
    ax.bar(["Real", "AI"], [1 - res["prob_ai"], res["prob_ai"]])
    ax.set_ylim(0, 1)
    ax.set_ylabel("OlasÄ±lÄ±k")
    st.pyplot(fig)
"""

"""
detection.py
AI-Ã¼retimi gÃ¶rsel tespiti  â€“  Sightengine â€˜genaiâ€™ modeli
"""

import json
import requests
import matplotlib.pyplot as plt
import streamlit as st


API_TIMEOUT = 15  # saniye â€“ istek kilitlenmesin diye


# ----------------------------------------------------------------------
# Ana fonksiyon
# ----------------------------------------------------------------------
def detect_image_ai(img_bytes: bytes) -> dict:
    """
    YÃ¼klenen gÃ¶rseli Sightengine 'genai' modeli ile analiz eder.
    DÃ¶nen sÃ¶zlÃ¼k:
        {
          "prob_ai": 0.83,
          "summary": {...},
          "raw": {...}
        }
    """
    cfg = st.secrets["ai_detection"]  # .streamlit/secrets.toml

    with st.spinner('GÃ¶rsel analiz ediliyor...'):
        try:
            resp = requests.post(
                cfg.get("endpoint", "https://api.sightengine.com/1.0/check.json"),
                data={
                    "models": cfg.get("models", "genai"),
                    "api_user": cfg["API_USER"],
                    "api_secret": cfg["API_SECRET"],
                },
                files={"media": ("upload.jpg", img_bytes, "image/jpeg")},
                timeout=API_TIMEOUT,
            )
        except requests.exceptions.RequestException as e:
            st.error(f"API isteÄŸi sÄ±rasÄ±nda hata oluÅŸtu: {e}")
            st.stop()

    if resp.status_code != 200:
        st.error(f"API isteÄŸi baÅŸarÄ±sÄ±z! (Durum Kodu: {resp.status_code})")
        st.stop()

    # YanÄ±tÄ± JSONâ€™a Ã§evir & debug logu
    try:
        data = resp.json()
    except ValueError:
        st.error("API yanÄ±tÄ± JSON formatÄ±nda deÄŸil!")
        st.stop()

    # Ham veri terminal Ã§Ä±ktÄ±sÄ±
    print("ğŸ“¦ Gelen API verisi:\n", json.dumps(data, indent=2))

    # Skoru Ã§Ä±kart
    try:
        prob_ai = float(data["type"]["ai_generated"])
    except (KeyError, TypeError, ValueError):
        prob_ai = 0.0
        st.error("API yanÄ±tÄ±nda 'type.ai_generated' alanÄ± bulunamadÄ±!")
        st.stop()

    st.success("GÃ¶rsel baÅŸarÄ±yla analiz edildi.")

    return {
        "raw": data,
        "prob_ai": prob_ai,
        "summary": {
            "GerÃ§eklik Skoru": f"{1 - prob_ai:.2%}",
            "AI OlasÄ±lÄ±ÄŸÄ±": f"{prob_ai:.2%}"
        }
    }

# ----------------------------------------------------------------------
# Basit bar grafiÄŸi
# ----------------------------------------------------------------------
def plot_detection_result(res: dict) -> None:
    prob_ai = res["prob_ai"]
    fig, ax = plt.subplots()
    ax.bar(["GerÃ§ek", "AI"], [1 - prob_ai, prob_ai])
    ax.set_ylim(0, 1)
    ax.set_ylabel("OlasÄ±lÄ±k")
    ax.set_title("GÃ¶rsel GerÃ§eklik Analizi")
    st.pyplot(fig)