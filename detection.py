"""import requests, os, json
import matplotlib.pyplot as plt
import streamlit as st
from io import BytesIO


def detect_image_ai(img_bytes: bytes) -> dict:
    cfg = st.secrets["ai_detection"]
    resp = requests.post(
        cfg["endpoint"],
        data={
            "models": cfg["models"],
            "api_user": cfg["API_USER"],
            "api_secret": cfg["API_SECRET"]
        },
        files={"media": ("image.jpg", img_bytes)}
    )
    data = resp.json()
    # Sightengine sonucundan Ã¶zetlik Ã§Ä±kar
    # Sonradan eklendi(serra)
    # Debug Ã§Ä±ktÄ±sÄ± â€“ terminalde gÃ¶receksin
    print("ðŸ“¦ Gelen API verisi:\n", json.dumps(data, indent=2))

    # Hata yakalama â€“ veri gelmezse Ã§Ã¶kmemesi iÃ§in
    try:
        # prob_ai = data["media"]["ai_generated"]["score"] eski hali
        prob_ai = data["ai_generated"]["score"]#(serra)

    except KeyError:
        prob_ai = 0.0
        # st.error("API'den beklenen 'media' verisi gelmedi. YapÄ± deÄŸiÅŸmiÅŸ olabilir.") eski hali
        st.error("API'den 'ai_generated' verisi alÄ±namadÄ±.") #serra's version

    # buraya kadar
    return {
        "raw": data,
        "prob_ai": prob_ai,
        "summary": {
            "GerÃ§eklik Skoru": f"{1 - prob_ai:.2%}",
            "AI OlasÄ±lÄ±ÄŸÄ±": f"{prob_ai:.2%}"
        }
    }


def plot_detection_result(res: dict):
    fig, ax = plt.subplots()
    ax.bar(["Real", "AI"], [1 - res["prob_ai"], res["prob_ai"]])
    ax.set_ylim(0, 1)
    ax.set_ylabel("OlasÄ±lÄ±k")
    st.pyplot(fig)
"""

"""
detection.py
AI-Ã¼retimi gÃ¶rsel tespiti  â€“  Sightengine â€˜genaiâ€™ modeli
"""

"""
import json
import requests
import matplotlib.pyplot as plt
import streamlit as st


API_TIMEOUT = 15  # saniye â€“ istek kilitlenmesin diye


# ----------------------------------------------------------------------
# Ana fonksiyon
# ----------------------------------------------------------------------
def detect_image_ai(img_bytes: bytes) -> dict:
   
    cfg = st.secrets["ai_detection"]         # .streamlit/secrets.toml

    resp = requests.post(
        cfg.get("endpoint", "https://api.sightengine.com/1.0/check.json"),
        data={
            "models": cfg.get("models", "genai"),
            "api_user": cfg["API_USER"],
            "api_secret": cfg["API_SECRET"],
        },
        files={"media": ("upload.jpg", img_bytes, "image/jpeg")},
        timeout=API_TIMEOUT,
    )

    # ---------------------------------
    # YanÄ±tÄ± JSONâ€™a Ã§evir & debug logu
    # ---------------------------------
    try:
        data = resp.json()
    except ValueError:
        st.error("API yanÄ±tÄ± JSON formatÄ±nda deÄŸil!")
        return {"raw": {}, "prob_ai": 0.0, "summary": {}}

    # Terminalde (veya Streamlit server logâ€™unda) ham Ã§Ä±ktÄ±yÄ± gÃ¶r
    print("ðŸ“¦ Gelen API verisi:\n", json.dumps(data, indent=2))

    # ---------------------------------
    # Skoru Ã§Ä±kart
    # ---------------------------------
    try:
        # Sightengine formatÄ±:  data["type"]["ai_generated"]  â†’ 0-1 float
        prob_ai = float(data["type"]["ai_generated"])
    except (KeyError, TypeError, ValueError):
        prob_ai = 0.0
        st.error("API yanÄ±tÄ±nda 'type.ai_generated' alanÄ± bulunamadÄ±!")

    return {
        "raw": data,
        "prob_ai": prob_ai,
         "prob_real": 1.0 - prob_ai,  # 0â€“1 arasÄ± float
        "summary": {
            "GerÃ§eklik Skoru": f"{1 - prob_ai:.2%}",
            "AI OlasÄ±lÄ±ÄŸÄ±":   f"{prob_ai:.2%}",
        },
    }


# ----------------------------------------------------------------------
# Basit bar grafiÄŸi
# ----------------------------------------------------------------------
def plot_detection_result(res: dict) -> None:
    prob_ai = res["prob_ai"]
    fig, ax = plt.subplots()
    ax.bar(["GerÃ§ek", "AI"], [res["prob_real"], res["prob_ai"]])
    ax.set_ylim(0, 1)
    ax.set_ylabel("OlasÄ±lÄ±k")
    st.pyplot(fig)
"""


# detection.py

# detection.py
import json
import requests
import matplotlib.pyplot as plt
import streamlit as st

API_TIMEOUT = 15  # saniye

def detect_image_ai(img_bytes: bytes) -> dict:
    cfg = st.secrets["ai_detection"]
    resp = requests.post(
        cfg["endpoint"],
        data={
            "models":   cfg["models"],
            "api_user": cfg["API_USER"],
            "api_secret": cfg["API_SECRET"],
        },
        files={"media": ("upload.jpg", img_bytes, "image/jpeg")},
        timeout=API_TIMEOUT,
    )
    data = resp.json()
    # â€” debug
    print("ðŸ“¦ Gelen API verisi:\n", json.dumps(data, indent=2))

    # AI <-> Real
    ai_score   = float(data["type"]["ai_generated"])
    real_score = 1.0 - ai_score

    # Photo vs Illustration
    photo_score        = data["type"].get("photo", 0.0)
    illustration_score = data["type"].get("illustration", 0.0)

    # Quality
    quality_obj   = data.get("quality", {})
    quality_score = quality_obj.get("score", 0.0)

    # Properties
    sharpness  = data.get("sharpness", 0.0)
    brightness = data.get("brightness", 0.0)
    contrast   = data.get("contrast", 0.0)
    colors     = data.get("colors", {}).get("dominant", {}).get("hex", "#000000")

    # Deepfake
    deepfake_score = data.get("deepfake", {}).get("score", 0.0)

    return {
        "raw":                data,
        "prob_ai":            ai_score,
        "prob_real":          real_score,
        "photo_score":        photo_score,
        "illustration_score": illustration_score,
        "quality_score":      quality_score,
        "sharpness":          sharpness,
        "brightness":         brightness,
        "contrast":           contrast,
        "dominant_color":     colors,
        "deepfake_score":     deepfake_score,
    }

def plot_detection_result(res: dict) -> None:
    """
    Basit bar grafiÄŸi: Real vs AI
    """
    fig, ax = plt.subplots()
    ax.bar(["Real", "AI"], [res["prob_real"], res["prob_ai"]])
    ax.set_ylim(0, 1)
    ax.set_ylabel("OlasÄ±lÄ±k")
    st.pyplot(fig)
